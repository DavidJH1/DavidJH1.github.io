[
  {
    "objectID": "ghac.html",
    "href": "ghac.html",
    "title": "David Hansen - Data Science Blog",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Clone Hero Auto Charter"
    ]
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Isaac Newtons’s CV",
    "section": "",
    "text": "Physicist, Mathematician, Cambridge professor.\n\nisaac@applesdofall.org | My wikipedia page\n\n\n\nStanding on the shoulders of giants\n\n\nLaws of motion, gravitation, minting coins, disliking Robert Hooke\n\n\n\nCooling, power series, optics, alchemy, planetary motions, apples.\n\n\n\n\n1654-1660 The King’s School, Grantham.\nJune 1661 - now Trinity College, Cambridge\n\nSizar\n\n1667 - death Trinity College, Cambridge\n\nFellow\n\n\n\n\n2012 President, Royal Society, London, UK\nAssociate, French Academy of Science, Paris, France\n\n\n\n\n\n\n1669 Newton Sir I, De analysi per æquationes numero terminorum infinitas.\n1669 Lectiones opticæ.\netc. etc. etc.\n\n\n\n2012 Infinitesimal calculus for solutions to physics problems, SMBC patent 001\n\n\n\n\n1600 Royal Mint, London\n\nWarden\nMinted coins\n\n1600 Lucasian professor of Mathematics, Cambridge University"
  },
  {
    "objectID": "resume.html#currently",
    "href": "resume.html#currently",
    "title": "Isaac Newtons’s CV",
    "section": "",
    "text": "Standing on the shoulders of giants\n\n\nLaws of motion, gravitation, minting coins, disliking Robert Hooke\n\n\n\nCooling, power series, optics, alchemy, planetary motions, apples."
  },
  {
    "objectID": "resume.html#education",
    "href": "resume.html#education",
    "title": "Isaac Newtons’s CV",
    "section": "",
    "text": "1654-1660 The King’s School, Grantham.\nJune 1661 - now Trinity College, Cambridge\n\nSizar\n\n1667 - death Trinity College, Cambridge\n\nFellow"
  },
  {
    "objectID": "resume.html#awards",
    "href": "resume.html#awards",
    "title": "Isaac Newtons’s CV",
    "section": "",
    "text": "2012 President, Royal Society, London, UK\nAssociate, French Academy of Science, Paris, France"
  },
  {
    "objectID": "resume.html#publications",
    "href": "resume.html#publications",
    "title": "Isaac Newtons’s CV",
    "section": "",
    "text": "1669 Newton Sir I, De analysi per æquationes numero terminorum infinitas.\n1669 Lectiones opticæ.\netc. etc. etc.\n\n\n\n2012 Infinitesimal calculus for solutions to physics problems, SMBC patent 001"
  },
  {
    "objectID": "resume.html#occupation",
    "href": "resume.html#occupation",
    "title": "Isaac Newtons’s CV",
    "section": "",
    "text": "1600 Royal Mint, London\n\nWarden\nMinted coins\n\n1600 Lucasian professor of Mathematics, Cambridge University"
  },
  {
    "objectID": "graphql.html",
    "href": "graphql.html",
    "title": "Getting Started with Shopify’s GraphQL Admin API",
    "section": "",
    "text": "Shopify has been transitioning its Admin API from REST to GraphQL over the past year, and developers are now strongly encouraged to use GraphQL when accessing store data. I recently had the opportunity to help a local business improve their inventory tracking system and used Shopify’s GraphQL Admin API as the foundation for the project.\nThis post documents what I learned from that experience — especially around authentication, querying structure, and pagination — to help others new to Shopify’s GraphQL API.",
    "crumbs": [
      "GraphQL Queries",
      "Shopify graphQL API"
    ]
  },
  {
    "objectID": "graphql.html#introduction",
    "href": "graphql.html#introduction",
    "title": "Getting Started with Shopify’s GraphQL Admin API",
    "section": "",
    "text": "Shopify has been transitioning its Admin API from REST to GraphQL over the past year, and developers are now strongly encouraged to use GraphQL when accessing store data. I recently had the opportunity to help a local business improve their inventory tracking system and used Shopify’s GraphQL Admin API as the foundation for the project.\nThis post documents what I learned from that experience — especially around authentication, querying structure, and pagination — to help others new to Shopify’s GraphQL API.",
    "crumbs": [
      "GraphQL Queries",
      "Shopify graphQL API"
    ]
  },
  {
    "objectID": "graphql.html#gaining-api-access",
    "href": "graphql.html#gaining-api-access",
    "title": "Getting Started with Shopify’s GraphQL Admin API",
    "section": "Gaining API Access",
    "text": "Gaining API Access\nTo begin making queries, I first had to:\n\nCreate a Shopify developer account\nRequest access from the store owner to install a custom app\nGenerate an Admin API access token\n\nWith the token in hand, I could authenticate my requests and begin interacting with store data.",
    "crumbs": [
      "GraphQL Queries",
      "Shopify graphQL API"
    ]
  },
  {
    "objectID": "graphql.html#learning-graphqls-structure",
    "href": "graphql.html#learning-graphqls-structure",
    "title": "Getting Started with Shopify’s GraphQL Admin API",
    "section": "Learning GraphQL’s Structure",
    "text": "Learning GraphQL’s Structure\nGraphQL is a powerful tool — but it comes with a learning curve. One of the most important features to understand is that GraphQL returns exactly what you ask for, and nothing more.\nThis is both its strength and a challenge for beginners. Unlike a REST API where you hit a URL and get a full payload, GraphQL requires you to define the structure of your response. That means you need to:\n\nUnderstand the structure of Shopify’s data model\nKnow what fields are available\nRead and reference Shopify’s GraphQL Admin API documentation extensively\n\nAt first, this can be overwhelming because the docs are deep and highly flexible — but once you get used to it, it becomes a very repeatable way to fetch exactly the data you need.",
    "crumbs": [
      "GraphQL Queries",
      "Shopify graphQL API"
    ]
  },
  {
    "objectID": "graphql.html#my-use-case-identifying-old-inventory",
    "href": "graphql.html#my-use-case-identifying-old-inventory",
    "title": "Getting Started with Shopify’s GraphQL Admin API",
    "section": "My Use Case: Identifying Old Inventory",
    "text": "My Use Case: Identifying Old Inventory\nThe store I worked with was concerned that certain items had been sitting on shelves too long. They wanted to:\n\nList all current in-store items\nSee how long each item had been available\n\nTo solve this, I needed a dataframe where each row represented a unique item, with columns for:\n\nInventory quantity\nDate it was created/added to Shopify\n\nBelow is the query I wrote to pull that data:\nquery currentInventory($cursor : String){\n    inventoryItems(first: 100, after: $cursor) {\n        edges{\n            cursor\n            node{\n                id\n                createdAt\n                sku\n                # Replace {location_id} with your actual Shopify Location GID\n                inventoryLevel(locationId: \"gid://shopify/Location/{location_id}\") {\n                    quantities (names: [\"available\"]) {\n                        name\n                        quantity\n                    }\n                }\n            }\n        }\n        pageInfo{\n            hasNextPage\n            endCursor\n        }\n    }\n}",
    "crumbs": [
      "GraphQL Queries",
      "Shopify graphQL API"
    ]
  },
  {
    "objectID": "graphql.html#the-challenge-of-pagination",
    "href": "graphql.html#the-challenge-of-pagination",
    "title": "Getting Started with Shopify’s GraphQL Admin API",
    "section": "The Challenge of Pagination",
    "text": "The Challenge of Pagination\nOne of the first technical challenges I encountered was pagination. In Shopify’s GraphQL Admin API, you can’t simply ask for “all” of something — you need to specify how many results you want and manage pagination manually. Looking at the query we can see that I needed to include a pageInfo block that contains the information required for pagination, endCursor and hasNextPage\nThis means your query must:\n\nDefine a first value (e.g., first: 100)\nReturn a pageInfo block with hasNextPage and endCursor\nUse the endCursor value to fetch the next “page” of results\nLoop through pages until hasNextPage is false\n\nA simple example loop\nwhile hasNextPage:\n    response = run_query(cursor)                #make a call\n    data.extend(response[\"data\"])               #parse the response data\n    cursor = response[\"pageInfo\"][\"endCursor\"]  #update the pagination info\nThis differs from REST APIs, where a single call often returns a full dataset (or paginates for you behind the scenes). With GraphQL, you control the page flow, which is powerful but also requires more logic.\n\nThink of it like reading a book — each query returns a defined “page” of data, and you flip through by passing a bookmark (endCursor) to your next call.",
    "crumbs": [
      "GraphQL Queries",
      "Shopify graphQL API"
    ]
  },
  {
    "objectID": "graphql.html#conclusion",
    "href": "graphql.html#conclusion",
    "title": "Getting Started with Shopify’s GraphQL Admin API",
    "section": "Conclusion",
    "text": "Conclusion\nGraphQL offers a high level of control and precision, making it an ideal tool for pulling tailored data — especially when working with platforms like Shopify. But with that control comes responsibility: you have to understand what you’re asking for and manage the flow of data yourself.\nHere’s what I learned from this first real-world implementation:\n\nYou get exactly what you ask for — nothing more, nothing less.\nYou must understand the data model — because there’s no “give me everything” fallback.\nPagination is essential — and needs to be built into your query and logic.\nDocumentation is your best friend — Shopify’s is excellent, but still requires study.\n\nOnce I understood how to construct precise queries and loop through paginated results, I was able to build a reliable tool to identify stale inventory for the business — a direct win powered by GraphQL.\n\nresource links\nShopify Admin API Docs",
    "crumbs": [
      "GraphQL Queries",
      "Shopify graphQL API"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "index.html#title-2-header",
    "href": "index.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  }
]